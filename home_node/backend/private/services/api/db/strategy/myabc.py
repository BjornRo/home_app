from typing import Iterable, Protocol, TypedDict, Unpack

from db.internal.models import (
    InternalRolesEnum,
    InternalUserAPIRegistration,
    InternalUserRoles,
    InternalUserUpdate,
    InternalUserView,
)
from db.models import (
    AllUserView,
    AppUser,
    LoginTEnum,
    User,
    UserData,
    UserLogin,
    UserRegistration,
    UserRolesAPIStruct,
    UserRolesEnum,
)
from mytypes import DateT, DateTimeUTC, UserID, UserID_Result


class UserSearchParams(TypedDict):
    login: str
    login_type: LoginTEnum
    filter_roles: Iterable[UserRolesEnum]
    disjunctive_select: bool


class BaseInternalDB(Protocol):
    __slots__ = ()

    async def insert_internal_user(
        self, name: str, hash_b64_pwd: str, created_by_user_id: str, enabled=True
    ) -> None | UserID: ...
    async def insert_internal_userrole(
        self, name_or_user_id: str, role: InternalRolesEnum, given_by_user_id: str
    ) -> bool: ...
    async def get_all_internal_user_view(
        self, limit: int, offset: int, asc: bool
    ) -> list[UserID_Result[InternalUserView]]: ...
    async def get_internal_userlogin(self, name: str) -> UserID_Result[InternalUserAPIRegistration] | None: ...
    async def get_internal_userroles(self, user_id: str) -> InternalUserRoles | None: ...
    async def get_internal_token_valid_from_date(self, user_id: str) -> DateTimeUTC: ...

    async def upsert_internal_token_valid_from_date(self, user_id: str) -> None: ...

    async def update_internal_user(self, name_or_user_id: str, data: InternalUserUpdate) -> None: ...

    async def exists_internal_user(self, user_id: str) -> bool: ...
    async def search_internal_user(self, name_or_user_id: str, limit: int, exact_match: bool) -> list[UserID_Result[InternalUserView]]: ...

    async def delete_internal_user(self, name_or_user_id: str) -> bool: ...
    async def delete_internal_userrole(self, name_or_user_id: str, role: InternalRolesEnum) -> bool: ...


class BaseDB(Protocol):
    __slots__ = ()

    async def insert_user(
        self, name: str, mail: str | None, hash_b64_pwd: str, created_by_user_id: str
    ) -> str | None: ...
    async def insert_userrole(
        self, user_id: str, role: UserRolesEnum, end_date: DateT, given_by_user_id: str
    ) -> None: ...
    async def replace_userrole(
        self,
        user_id: str,
        role: UserRolesEnum,
        to_replace: UserRolesEnum,
        end_date: DateT,
        given_by_user_id: str,
    ): ...

    async def get_all_user_view(self, limit: int, offset: int, asc: bool) -> list[AllUserView]: ...
    async def get_app_user(
        self, user_id: str, filter_roles: UserRolesEnum | Iterable[UserRolesEnum], disjunctive_select: bool
    ) -> AppUser | None: ...
    async def get_user_name(self, user_id: str) -> str | None: ...
    async def get_user_modified(self, user_id: str) -> DateTimeUTC | None: ...
    async def get_user(self, user_id: str) -> User | None: ...
    async def get_user_id(self, name: str) -> str | None: ...
    async def get_userid_roles_pwd(
        self, **kwargs: Unpack[UserSearchParams]
    ) -> UserID_Result[tuple[str, UserRolesAPIStruct]] | None: ...
    async def get_user_login(self, user_id: str) -> UserLogin | None: ...
    async def get_user_data(self, user_id: str) -> UserData | None: ...
    async def get_user_registration(self, user_data: str) -> UserRegistration | None: ...
    async def get_token_valid_from_date(self, user_id: str) -> int: ...

    async def update_name(self, user_id: str, new_login: str) -> None: ...
    async def update_mail(self, user_id: str, new_mail: str) -> None: ...
    async def update_data_name(self, user_id: str, new_name: str) -> None: ...
    async def update_pwd(self, user_id: str, new_hash_b64_pwd: str) -> None: ...
    async def update_user_modified(self, user_id: str, date: str) -> None: ...

    async def upsert_token_valid_from_date(self, user_id: str) -> None: ...

    async def exists_mail(self, mail: str) -> bool: ...
    async def exists_name(self, name: str) -> bool: ...
    async def exists_user_id(self, user_id: str) -> bool: ...

    async def search_user(self, name_or_email: str, limit: int, exact_match: bool = False) -> list[AllUserView]: ...

    async def delete_user(self, user_id: str) -> None: ...
    async def delete_userrole(self, user_id: str, role: UserRolesEnum) -> None: ...
    async def delete_mail(self, user_id: str) -> None: ...

    """Misc"""

    async def number_of_users(self) -> int: ...

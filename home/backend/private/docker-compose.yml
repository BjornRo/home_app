x-db-path: &db-path
  DB_INTERNAL: internal.sqlite
  DB_DATA: data.sqlite
  DB_APP: app.sqlite
  DATA_PATH: /appdata/
  CA_FILEPATH: /certs/ca/root.crt

services:
  cache_app:
    container_name: cache_app
    image: valkey/valkey:latest
    volumes:
      - /dev/shm:/mem
    logging:
      driver: none
    restart: unless-stopped
    command: valkey-server --port 0 --unixsocket /mem/cache_app --unixsocketperm 770 --save "" --databases 2

  cache_data:
    container_name: cache_data
    image: valkey/valkey:latest
    volumes:
      - /dev/shm:/mem
    logging:
      driver: none
    restart: unless-stopped
    command: valkey-server --port 0 --unixsocket /mem/cache_data --unixsocketperm 770 --save "" --databases 1

  cache_api:
    container_name: cache_api
    image: valkey/valkey:latest
    volumes:
      - /dev/shm:/mem
    logging:
      driver: none
    restart: unless-stopped
    command: valkey-server --port 0 --unixsocket /mem/cache_api --unixsocketperm 770 --save "" --databases 1

  mqtt_auth_service: # Both this and container_name works as hostname
    container_name: mas
    build:
      context: ./services/mqtt_auth_service
      dockerfile: mqtt_auth_service.dockerfile
    volumes:
      - ./services/mqtt_auth_service:/app
      - ./certs/mqtt:/certs/mqtt:ro
      - ./certs/ca:/certs/ca:ro
      - ./appdata:/appdata
    environment:
      <<: *db-path
    ports:
      - 8888:8888
    restart: unless-stopped
    command: python3 -OO main.py

  mqtt:
    container_name: mqtt
    depends_on:
      - mqtt_auth_service
    build:
      context: ./services/mqtt
      dockerfile: Dockerfile
    volumes:
      - ./services/mqtt/mosquitto.cfg:/etc/mosquitto/mosquitto.conf:ro
      - ./services/mqtt/go-auth.cfg:/etc/mosquitto/conf.d/go-auth.conf:ro
      - ./certs/ca/root.crt:/usr/local/share/ca-certificates/myroot.crt:ro
      - ./certs/mqtt:/certs/mqtt:ro
    logging:
      driver: none
    ports:
      - 8883:8883
      - 9001:9001
    restart: unless-stopped

  api:
    depends_on:
      - cache_app
      - cache_data
      - cache_api
    container_name: api
    build:
      context: ./services/api
      dockerfile: api.dockerfile
    volumes:
      - /dev/shm:/mem
      - ./services/api:/app
      - ./certs/api:/certs/api:ro
      - ./certs/ca:/certs/ca:ro
      - ./appdata:/appdata
    ports:
      - 8000:8000
    environment:
      REFRESH_JWT_DAYS: 180
      ACCESS_JWT_MINUTES: 15
      <<: *db-path
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    command: >
      uvicorn app:app
      --host 0.0.0.0
      --port 8000
      --log-level critical
      --workers 2
      --ssl-certfile /certs/api/api.crt
      --ssl-keyfile /certs/api/api.key
      --ssl-ca-certs /certs/ca/root.crt

  sensor_listener:
    depends_on:
      - mqtt
      - cache_data
    container_name: sli
    build:
      context: ./services/sensor_listener
      dockerfile: sensor_listener.dockerfile
    environment:
      <<: *db-path
    volumes:
      - /dev/shm:/mem
      - ./certs/sensor_listener:/certs/sensor_listener:ro
      - ./services/sensor_listener:/app
      - ./appdata:/appdata:ro
      - ./certs/ca:/certs/ca:ro
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    command: python3 -OO main.py

  scheduler:
    container_name: scheduler
    build:
      context: ./services/scheduler
      dockerfile: scheduler.dockerfile
    environment:
      <<: *db-path
    volumes:
      - /dev/shm:/mem
      - ./appdata:/appdata
      - ./services/scheduler:/app
    # logging:
    #   driver: none
    restart: unless-stopped
    network_mode: host
    command: python3 -OO main.py

  # ntp_server:
  #   container_name: ntp_server
  #   build: ./services/ntp_server
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /etc/timezone:/etc/timezone:ro
  #   ports:
  #     - 123:123/udp
  #   restart: unless-stopped

#   ddns:
#     container_name: ddns
#     build: ./services/ddns
#     environment:
#       <<: *db-path
#     volumes:
#       - ./appdata:/appdata:ro
#     logging:
#       driver: none
#     restart: unless-stopped
#     network_mode: host
